<?xml version="1.0" encoding="utf-8"?><waypoints>
	<onLoad>

	cprintf (cli.lightblue, "\nCelesteria's FarmAround Assistent\n\n")

	function createTargetTable ()
		local tmp, tbl		= {}, {}
		local objectList	= CObjectList ()
		objectList:update ()
		for i = 0, objectList:size () do
			local obj = objectList:getObject (i)
			if obj.Attackable and not obj.IsPet then
				tmp[obj.Id] = obj.Name
			end
		end
		for id,name in pairs (tmp) do
			table.insert (tbl, ' ('..id..') '..name)
		end
		return tbl
	end

	local triggerKEY = key.VK_ALT
	local targetTable = createTargetTable ()
	local chooseTable = table.copy (targetTable)
	chooseTable ['a'] = 'all' chooseTable ['c'] = 'cancel'

	target = UMMD_chooseList (chooseTable, 'Which mob do you want to farm?')
	if target=='c' then return end
	--radius = UMMD_chooseNumber (0, 1000, 'Wich radius do you want to wander?')
	
	if target=='a' then
		changeOptionMobs ('add', targetTable)
	else
		changeOptionMobs ('add', targetTable[target])
	end

	local attack = true

	-- Main loop
	while true do
		yrest (250)
		if not isInGame () or not player:exists () or not player:isAlive () then
			if not isInGame () or not player:exists () then
				printf ("Not in game. Waiting till you reenter game... ")
			else
				printf ("Player dead. Waiting for resurection... ")
			end
			repeat
				rest (1000)
				local address = memoryReadRepeat ("uintptr", getProc (), addresses.staticbase_char, addresses.charPtr_offset)
				local id = memoryReadRepeat ("uint", getProc (), address + addresses.pawnId_offset)
				local hp = memoryReadRepeat ("int", getProc (), address + addresses.pawnHP_offset)
			until isInGame () and id and id >= PLAYERID_MIN and PLAYERID_MAX >= id and hp > 1
			yrest (3000)
			print ("Continuing.")
			player:update ()
		end

		local address = memoryReadRepeat ("uintptr", getProc (), addresses.staticbase_char, addresses.charPtr_offset)
		local class1 = memoryReadRepeat ("int", getProc (), address + addresses.pawnClass1_offset)
		local class2 = memoryReadRepeat ("int", getProc (), address + addresses.pawnClass2_offset)
		if address ~= player.Address or class1 ~= player.Class1 or class2 ~= player.Class2 then
			player:update ()
		end

		if keyPressedLocal (triggerKEY) then
			attack = (not attack)
			if attack then
				RoMScript ("DEFAULT_CHAT_FRAME:AddMessage ('|cffffff00attack mode on|r')")
			else
				RoMScript ("DEFAULT_CHAT_FRAME:AddMessage ('|cffffff00attack mode off|r')")
			end
			while keyPressedLocal (triggerKEY) do
				yrest (100)
			end
		end

		-- clearTarget if battling
		player:updateBattling ()
		player:updateTargetPtr ()
		if player.Battling and player.TargetPtr ~= 0 then
			local target = CPawn.new (player.TargetPtr)
			target:updateType ()
			if target.Type ~= PT_MONSTER or target:isAlive () == false then
				player:clearTarget ()
				catchCavy ()
				catchMysteriousBag ()
			end
		end

		-- If mob attacks me
		player:updateBattling ()
		local aggrotarget=player:findEnemy (true,nil,evalTargetDefault)
		if player.Battling or aggrotarget then
			-- Attack back only if not moving
			player:updateActualSpeed ()
			if player.Moving or keyPressedLocal (key.VK_W) or keyPressedLocal (key.VK_UP) or keyPressedLocal (1) or keyPressedLocal (2) then
				player:updateTargetPtr ()
			else
				player:target (aggrotarget)
				player:fight ()
			end

		-- if I attack a mob
		elseif attack == true then
			player:updateTargetPtr ()
			if player.TargetPtr ~=0 and player.TargetPtr ~= player.Address then
				local target = CPawn.new (player.TargetPtr)
				target:updateType ()
				if target.Type == PT_MONSTER then
					player:fight ()
				end
			end
		end

		inventory:update ()

		player:updateMounted ()
		if not player.Mounted then
			player:checkPotions ()
			player:updateTargetPtr ()
			local target = CPawn.new (player.TargetPtr)
			player:checkSkills (true, target)
		end
	end
	</onLoad>
</waypoints>
